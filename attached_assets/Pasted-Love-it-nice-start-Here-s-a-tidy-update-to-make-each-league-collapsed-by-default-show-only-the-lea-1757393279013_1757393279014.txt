Love it—nice start. Here’s a tidy update to make each league collapsed by default, show only the league name + potential points gain (delta) in the header, and let users expand to see recommendations. I’m also sorting leagues by highest potential points gain → lowest.

1) Replace LeagueCard.tsx with a collapsible card
import React, { useMemo, useState } from "react";
import type { LeagueSummary } from "../lib/types";
import { statusFlags } from "../lib/optimizer";

export default function LeagueCard({ lg }: { lg: LeagueSummary }) {
  const [open, setOpen] = useState(false);

  // Count suggested changes by comparing current starters to optimal starters
  const changeCount = useMemo(() => {
    const fixedLen = lg.roster_positions.length;
    let diffs = 0;
    for (let i = 0; i < fixedLen; i++) {
      const curId = lg.starters[i];
      const optId = lg.optimalSlots[i]?.player?.player_id;
      if (curId && optId && curId !== optId) diffs++;
    }
    return diffs;
  }, [lg]);

  return (
    <div className="rounded-2xl shadow border">
      {/* Header Row (always visible) */}
      <button
        className="w-full flex items-center justify-between p-4 text-left hover:bg-gray-50 rounded-2xl"
        onClick={() => setOpen((v) => !v)}
        aria-expanded={open}
      >
        <div className="min-w-0">
          <div className="text-sm text-gray-500 truncate">{lg.rosterUserDisplay}</div>
          <h3 className="text-base md:text-lg font-semibold truncate">{lg.name}</h3>
        </div>

        <div className="flex items-center gap-4">
          {/* potential points gain (delta) */}
          <div className={`text-sm md:text-base font-semibold ${lg.delta >= 0 ? "text-green-600" : "text-red-600"}`}>
            {lg.delta >= 0 ? "+" : ""}{lg.delta.toFixed(1)} pts
          </div>
          <div className="text-xs md:text-sm text-gray-500">{changeCount} changes</div>
          <svg className={`h-5 w-5 transition-transform ${open ? "rotate-180" : "rotate-0"}`} viewBox="0 0 20 20" fill="currentColor" aria-hidden>
            <path d="M5.23 7.21a.75.75 0 011.06.02L10 10.939l3.71-3.71a.75.75 0 111.06 1.061l-4.24 4.24a.75.75 0 01-1.06 0L5.25 8.29a.75.75 0 01-.02-1.06z" />
          </svg>
        </div>
      </button>

      {/* Detail (collapsible) */}
      {open && (
        <div className="p-4 pt-0">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <div>
              <div className="font-semibold mb-1">Current Starters</div>
              <ul className="space-y-1">
                {lg.starters.map((pid, i) => {
                  const slot = lg.roster_positions[i];
                  const cur = lg.optimalSlots.find(s => s.player?.player_id === pid)?.player;
                  const flags = statusFlags(cur);
                  return (
                    <li key={i} className="text-sm">
                      <span className="inline-block w-28 font-mono">{slot}</span>
                      {cur ? `${cur.name} (${cur.pos}) — ${cur.proj?.toFixed(2) ?? "0.00"}` : `player_id ${pid}`}
                      {flags.length > 0 && <span className="ml-2 text-xs text-amber-600">[{flags.join(", ")}]</span>}
                    </li>
                  );
                })}
              </ul>
            </div>

            <div>
              <div className="font-semibold mb-1">Optimal Starters</div>
              <ul className="space-y-1">
                {lg.optimalSlots.map((s, i) => {
                  const p = s.player;
                  const flags = statusFlags(p);
                  return (
                    <li key={i} className="text-sm">
                      <span className="inline-block w-28 font-mono">{s.slot}</span>
                      {p ? `${p.name} (${p.pos}) — ${p.proj?.toFixed(2) ?? "0.00"}` : "—"}
                      {flags.length > 0 && <span className="ml-2 text-xs text-amber-600">[{flags.join(", ")}]</span>}
                    </li>
                  );
                })}
              </ul>
            </div>
          </div>

          <div className="mt-3 text-sm">
            Current total: <b>{lg.currentTotal.toFixed(2)}</b> — Optimal total: <b>{lg.optimalTotal.toFixed(2)}</b>
          </div>
        </div>
      )}
    </div>
  );
}

2) Ensure sorting by potential points gain (delta)

You already had this in App.tsx, but double-check the runCheck() end:

// Sort by potential points gained (delta) high → low
setSummaries(out.sort((a, b) => b.delta - a.delta));


If you ever want to sort by raw Optimal Total instead, use:

setSummaries(out.sort((a, b) => b.optimalTotal - a.optimalTotal));

3) Optional: compact list look

If you want the page to look more like a scannable list, wrap the list with spacing:

<section className="space-y-3">
  {summaries.map((lg) => <LeagueCard key={lg.league_id} lg={lg} />)}
</section>