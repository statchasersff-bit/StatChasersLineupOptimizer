Make the CSV loader bullet-proof (one-time code tweak)

In your parseProjections (or wherever you read the CSV), normalize headers and coerce numbers so minor CSV quirks donâ€™t break the UI.

// utils/csv.ts (or wherever your parseProjections lives)
import Papa from "papaparse";

const NUM_COLS = new Set([
  "proj","pass_att","pass_comp","pass_yd","pass_td","pass_int",
  "rush_att","rush_yd","rush_td","rec","rec_yd","rec_td","fum_lost","two_pt",
  "xpm","xpa","fgm_0_19","fgm_20_29","fgm_30_39","fgm_40_49","fgm_50p",
  "sacks","defs_int","defs_fum_rec","defs_td","safety","blk_kick","ret_td","pts_allowed"
]);

const HEADER_ALIASES: Record<string,string> = {
  projection: "proj",          // tolerate "Projection"
  projections: "proj",
  opponent: "opp",             // tolerate "Opponent"
  position: "pos",
};

function coerceNumber(v: any) {
  if (v === null || v === undefined) return null;
  const s = String(v).trim().replace(/,/g, ""); // drop thousands commas
  if (s === "" || s.toLowerCase() === "na" || s.toLowerCase() === "n/a") return null;
  const n = Number(s);
  return Number.isFinite(n) ? n : null;
}

export async function parseProjectionsFile(fileOrText: File | string) {
  const text = typeof fileOrText === "string" ? fileOrText : await fileOrText.text();

  return new Promise<any[]>((resolve, reject) => {
    Papa.parse(text, {
      header: true,
      skipEmptyLines: true,
      transformHeader: (h) => {
        const k = h.trim().toLowerCase();
        return HEADER_ALIASES[k] ?? k;
      },
      transform: (value, field) => {
        const k = field.trim().toLowerCase();
        return NUM_COLS.has(k) ? coerceNumber(value) : String(value ?? "").trim();
      },
      complete: (out) => resolve(out.data as any[]),
      error: reject,
    });
  });
}


And where you fetch built-ins, keep no-cache and add a version to be safe:

const url = `/projections/2025/week03.csv?v=${Date.now()}`; // add this cache-buster just during debugging
const res = await fetch(url, { cache: "no-store" });